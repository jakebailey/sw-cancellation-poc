(()=>{var d="/@cancellation@/";function g(e){return e.includes(d)}function l(e){return`.${d}${e}`}function u(e){return!!(e&&typeof e.id=="string")}var o;(n=>{function e(t){return t.data.type==="setCanceled"&&u(t.source)&&(typeof t.data.id=="number"||typeof t.data.id=="string")}n.is=e})(o||(o={}));var r;(n=>{function e(t){return t.data.type==="deleteCanceled"&&u(t.source)&&(typeof t.data.id=="number"||typeof t.data.id=="string")}n.is=e})(r||(r={}));var m="/@rpc@/";function f(e){return e.includes(m)}var i="v1";function p(e,n){return e+"/"+n}async function h(e,n){let t=p(e,n);(await self.caches.open(i)).put(t,new Response("",{status:200}))}async function C(e,n){return h(e,n),new Response("",{status:200})}async function x(e,n){!1&&console.log(`sw: getCanceledResponse ${e}`);let t=p(e,n);return await(await self.caches.open(i)).match(t)??new Response("",{status:299})}async function R(e,n){let t=p(e,n);(await self.caches.open(i)).delete(t)}async function E(e,n){return R(e,n),new Response("",{status:200})}self.addEventListener("install",e=>{!1&&console.log("sw: installed"),self.skipWaiting()});self.addEventListener("activate",e=>{e.waitUntil(async()=>{!1&&console.log("sw: activated"),await self.clients.claim(),await self.caches.delete(i)})});self.addEventListener("message",e=>{o.is(e)?h(l(e.data.id),e.source.id):r.is(e)&&R(l(e.data.id),e.source.id)});async function v(e,n){let t=await self.clients.get(e),s={type:"log",message:n};t?.postMessage(s)}self.addEventListener("fetch",e=>{let n=e.request;!1&&v(e.clientId,`fetch ${n.method} ${n.url}`);let t=new URL(n.url);if(t.host===self.location.host)if(g(t.pathname))switch(n.method){case"GET":e.respondWith(x(t.pathname,e.clientId));break;case"POST":e.respondWith(C(t.pathname,e.clientId));break;case"DELETE":e.respondWith(E(t.pathname,e.clientId));break}else f(t.pathname)&&e.respondWith(P(n,e.clientId))});function M(e,n){return new Promise(t=>{let{port1:s,port2:a}=new MessageChannel;s.onmessage=y=>t(y.data);let w={type:"rpc",request:n,port:a};e.postMessage(w,[a])})}async function P(e,n){let t=await self.clients.get(n);if(!t)return new Response("no client",{status:500});let s=await e.json(),a=await M(t,s);return new Response(JSON.stringify(a),{status:200})}!1&&console.log("sw: loaded");})();
//# sourceMappingURL=sw.js.map
